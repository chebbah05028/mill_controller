#!/usr/bin/env python

'''
This script contains a ROS node that accepts Trajectory messages and produces a GCode file based on the included trajectory data. Publishes a bool message as a notification to the next node in the pipeline.
This script presumes that the CNC machine has been properly homed and had the G54 workspace set up beforehand. It will not make any safety checks on input coordinates.
For more information on the appropriate format of Trajectory messages, see Trajectory.msg in the msgs directory.
Uses the following parameters:
  m_width
  m_height
  m_angle
  x_offset
  y_offset
'''

'''
TODO
Add offsets for new marker holder.
Add time horizon functionality. Read a time parameter and stop writing instructions beyond that time.
'''

import numpy as np
import rospkg
import rospy
import sys
from std_msgs.msg import Bool
from mill_controller.msg import Trajectory


# Use this publisher to send the output flag
pub = rospy.Publisher('gcode_ready_flag',Bool,queue_size=1)



def callback(message):
    # Upon receiving a Trajectory message, parse the information and write a GCode file based on it.

    # Make a copy of message so that it can be modified
    msg = Trajectory()

    # Read parameters from the namespace or use reasonable defaults
    width = rospy.get_param("m_width", 279.4)
    height = rospy.get_param("m_height", 215.9)
    theta = rospy.get_param("m_angle", 0.0)
    x_offset = rospy.get_param("x_offset", 0.0)
    y_offset = rospy.get_param("y_offset", 0.0)
    x_range = rospy.get_param("x_range")
    y_range = rospy.get_param("y_range")
    x_max = x_range[1]
    x_min = x_range[0]
    y_max = y_range[1]
    y_min = y_range[0]


    # Compose Transformation matrix from material to machine space
    Twm = np.zeros((3,3))
    Twm[2,2] = 1.0
    Twm[0,0] = np.cos(np.deg2rad(theta))
    Twm[0,1] = -np.sin(np.deg2rad(theta))
    Twm[0,2] = x_offset
    Twm[1,0] = np.sin(np.deg2rad(theta))
    Twm[1,1] = np.cos(np.deg2rad(theta))
    Twm[1,2] = y_offset
    Twm[2,2] = 1.0

    # Get system directory for file locations
    rospack = rospkg.RosPack()
    path = rospack.get_path('mill_controller') + '/output.gcode'
    # Open output file
    f = open(path, 'w')

    # Write the Header
    s = ''

    # Basic Settings
    s = s + 'G90' + '\n'                    # Set absolute coordinates
    s = s + 'G21' + '\n'                    # Set mm
    s = s + 'G17' + '\n'                    # Set plane to x/y
    s = s + 'G94' + '\n'                    # Set feed rate to mm/min
    s = s + 'G54' + '\n'                    # Use WCS G54 Coordinates

    f.write(s)                              # Write to file



    # Write the Body
    # Set Feed rate and move to starting point.
    s = 'G0' + ' X' + str(message.x[0]) + ' Y' + str(message.y[0]) + '\n'
    s = s + 'G0' + ' Z-15' + '\n'
    s = s + 'G1' + ' Z-20.0762' + ' F50' + '\n'

    f.write(s)


    # Follow trajectory. Operating on the assumption that the trajectory can be approximated as a series of straight line motions from point to point. Improvement of this model will probably need example trajectories to test. Starting with fixed feed rate.


    # Shift range limits so that range bottoms at zero
    x_max = x_max-x_min
    y_max = y_max-y_min

    for index in range(message.length):
        # Interpolate from input ranges to material ranges
        x = message.x[index] - x_min
        y = message.y[index] - y_min
        x = x/x_max * width
        y = y/y_max * height

        # Transform from material space into machine space
        vector = np.ones((3,1))
        vector[0,0] = x
        vector[1,0] = y
        vector = Twm.dot(vector)

        # Check whether the commanded motions are within the limits of machine space.
        if(vector[0,0] > 500.0 or vector[0,0] < 500.0 or vector[1,0] > 500.0 or vector[1,0] < 500.0):
            rospy.logerr("Commanded coordinates are out of machine bounds. Aborting GCode write.")
            f.close()
            return 1

        # Compose gcode string
        s = 'G1' + ' X' + str(vector[0,0]) + ' Y' + str(vector[1,0]) + ' F200.0' + '\n'

        # Write command to output
        f.write(s)


    # Write the Footer
    s = ''
    s = s + 'G90' + '\n'                    # Set to absolute coordinates
    s = s + 'G21' + '\n'                    # Set to mm
    s = s + 'G17' + '\n'                    # Set plane to x/y
    s = s + 'G94' + '\n'                    # Set feed rate to mm/min
    s = s + 'G54' + '\n'                    # Use WCS G54 Coordinates

    s = s + 'G1 Z-15 F50' + '\n'       # Move bit out of harms way
    s = s + 'G0 Z0' + '\n'
    s = s + 'G0 X450 Y350' + '\n'

    s = s + 'G4 P0.1' + '\n'                # Dwell for a moment
    f.write(s)                              # Write to file


    # Close output
    f.close()

    # Publish to a flag topic to trigger the next node.
    flag = Bool()
    flag.data = True
    pub.publish(flag)




def main():
    # Initialize the ROS node and Subscriber
    rospy.init_node("trajectory_parser_node")
    rospy.Subscriber('trajectory_input',Trajectory,callback)

    # Spin until shut down
    rospy.spin()





if __name__ == '__main__':
    main()
