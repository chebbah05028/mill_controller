#!/usr/bin/env python

"""
This script contains a ROS node that will receive Image messages over the topic 'raw_image', convert them into OpenCV images, perform computer vision tasks, currently placeholder, convert them back into Image messages and publish them on the topic 'processed_image'.
"""
'''
TODO
adjust image dimensions of aligned images
'''

import rospkg
import rospy
import cv2
import numpy as np
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError


# Use this publisher to send the output
pub = rospy.Publisher('processed_image',Image,queue_size=1)

# Create a translator object to convert images
converter = CvBridge()

# Set threshold for color processing
threshold = 500


# Calibration Globals
_ws_hom = False
_ms_hom = False



def callback(input):
    global _ws_hom, _ms_hom
    # The callback accepts an Image message, performs visual processing, and publishes the result. Darker pixels will be changed to black, non-dark pixels will be made white.

    # Translate Image message into a cv2 image assuming bgr8 encoding. The image will revert to a more general CV encoding, like 8UC3.
    cv_image = converter.imgmsg_to_cv2(input,"bgr8")

    # Make a copy, as the original image will not be editable after conversion
    cv_image = cv_image.copy()

    # Apply a homography to warp the new image to match the reference
    semi_aligned_img = cv2.warpPerspective(cv_image, _ws_hom, (500, 500))
    aligned_img = cv2.warpPerspective(semi_aligned_img, _ms_hom, (640,int(640*.75)))

    # Perform visual processing on the image to extract relevant data.
    # Extract a tuple containing the number of (rows, columns, channels).
    (rows,cols,chans)  = aligned_img.shape

    # Cycle through each row
    for row in range(rows):
        # Cycle through each column
        for col in range(cols):
            total = 0
            # Cycle through each channel
            for chan in range(chans):
                # Sum the intensity of the channels
                total += aligned_img.item(row,col,chan)

            # Cycle through each channel
            for chan in range(chans):
                # If the total intensity is less than the threshold
                if (total < threshold):
                    # Set color to black
                    aligned_img.itemset((row,col,chan),0)
                else:
                    # Set the color to white
                    aligned_img.itemset((row,col,chan),255)


    # Translate cv2 image back to an Image message using existing encoding. This will be a generic encoding like 8UC3.
    msg = converter.cv2_to_imgmsg(aligned_img,"passthrough")

    # Assert encoding. CV generally uses bgr8.
    msg.encoding = "bgr8"

    # Publish image message
    pub.publish(msg)






def main():
    global _ws_hom, _ms_hom
    # Initialize ROS node
    rospy.init_node("image_processor_node")


    # Load homography data for image alignment
    rospack = rospkg.RosPack()
    path = rospack.get_path('mill_controller') + '/homographies/'
    try:
        _ws_hom = np.load(path + 'ws_hom.npy')
        _ms_hom = np.load(path + 'ms_hom.npy')
    except IOError:
        rospy.logerr("Error loading calibration. File not found. Run image_calibration node.")
        return 1



    # Initialize Main Subscriber
    rospy.Subscriber('raw_image',Image,callback)

    # Spin until shut down
    rospy.spin()





if __name__ == '__main__':
    main()
