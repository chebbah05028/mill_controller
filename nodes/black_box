#!/usr/bin/env python
"""
This script contains a ROS node that will read a trajectory out of a csv file in the mill_controller/trajectories/ directory. Each time the node receives a message over the /output2 topic the trajectory's time stamps will be reduced by the amount of the time horizon parameter, points at t<0 will be removed, and the revised file name will be published to /csv_name to be run on the X-Carve. This cycle will continue until no points remain in the trajectory, simulating closed loop input.
"""
'''
TODO
Change output2 topic to something less generic
'''

import rospy
import sys
from std_msgs.msg import String
from mill_controller.msg import Occupancy


# Use this publisher to send the output
pub = rospy.Publisher('csv_name',String,queue_size=1)

# Globals
_counter = -1


def callback(msg):
    # Callback receives Occupancy messages. Each time it is called it increases the counter by one, updates the csv output file timestamps, and publishes the file name to csv_name.
    global _counter





def main():
    # Main initializes the rosnode, creates an empty occupancy message, and runs callback to bootstrap the feedback loop.

    # Initialize the ROS node and subscriber
    rospy.init_node("black_box_node")
    rospy.Subscriber('output2', Occupancy, callback)

    # Create empty message
    # Run callback


    # Spin until shut down
    rospy.spin()





if __name__ == '__main__':
    main()
